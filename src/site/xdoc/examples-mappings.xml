<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
    Copyright 2015 Hippo

    Licensed under the Apache License, Version 2.0 (the  "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS"
    BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<document>
  <properties>
    <title>Mapping Examples</title>
  </properties>
  <body>

    <section name="Mapping Examples">

      <p>
        This library can be used in any environment where JCR and Hippo Repository API are available.
        However, just for simiplicty, the following examples are assumed to run in Hippo Updater Editor (a.k.a Groovy Updater).
      </p>

      <p>
        <strong><em>WARNING</em></strong>:
        If you run the following demo scripts in production or in system having too many content, then
        it might cause a critical system overhead or problems.
        So, run the following demo scripts in a local test environment or change the XPath query to narrow the
        search result to a resonably small amount.
      </p>

      <subsection name="Mapping Documents">

        <table border="1">
          <tr>
            <th>Name:</th>
            <td>
              Export All Published Documents to JSON
            </td>
          </tr>
          <tr>
            <th>Description:</th>
            <td>
              For demonstration purpose, this example groovy script (a) maps each live document variant node
              to <code>ContentNode</code>, (b) replace UUIDs of compound mirror link nodes by paths as an
              advanced example, and (c) logs a serialized string from the <code>ContentNode</code>.
            </td>
          </tr>
          <tr>
            <th>XPath query:</th>
            <td>
              <code>/jcr:root/content/documents//element(*,hippostd:publishable)[@hippostd:state='published']</code>
            </td>
          </tr>
          <tr>
            <th>Parameters:</th>
            <td></td>
          </tr>
          <tr>
            <td colspan="2">
              <div class="brush: java">
              <source><![CDATA[
package org.hippoecm.frontend.plugins.cms.admin.updater

import org.onehippo.repository.update.BaseNodeUpdateVisitor
import java.util.*
import javax.jcr.query.*
import org.apache.commons.lang.*
import org.onehippo.forge.content.pojo.common.jcr.*
import org.onehippo.forge.content.pojo.common.util.*
import org.onehippo.forge.content.pojo.mapper.*
import org.onehippo.forge.content.pojo.mapper.jcr.*
import org.onehippo.forge.content.pojo.mapper.jcr.hippo.*
import org.onehippo.forge.content.pojo.model.*
import com.fasterxml.jackson.databind.*

class UpdaterTemplate extends BaseNodeUpdateVisitor {

    Session jcrSession
    ContentNodeMapper contentNodeMapper
    ObjectMapper objectMapper

    void initialize(Session jcrSession) {
        this.jcrSession = jcrSession

        contentNodeMapper = new DefaultJcrContentNodeMapper();
        objectMapper = new ObjectMapper();
    }

    boolean doUpdate(Node node) {
        log.debug "Visiting node ${node.path}"
        def handleNode = node.getParent()

        // Mapping the document node to ContentNode
        ContentNode contentNode = contentNodeMapper.map(node)

        // Just as an advanced example, let's find all the mirror link node and replace the UUIDs by paths.
        List<ContentNode> mirrors = contentNode.queryNodesByXPath("//nodes[properties[@itemName='hippo:docbase']]")
        for (ContentNode mirror : mirrors) {
            String docbase = mirror.getProperty("hippo:docbase").getValue();
            mirror.setProperty("hippo:docbase", jcrSession.getNodeByIdentifier(docbase).getPath())
        }

        // Let's print out (serialize) the content node by simply using Jackson ObjectMapper for debugging purpose.
        StringWriter writer = new StringWriter(2048)
        objectMapper.writerWithDefaultPrettyPrinter().writeValue(writer, contentNode)
        log.debug "\n" + writer.toString() + "\n"

        return false
    }

    boolean undoUpdate(Node node) {
        throw new UnsupportedOperationException('Updater does not implement undoUpdate method')
    }

}
              ]]></source>
              </div>
            </td>
          </tr>
        </table>

        <p>
          The script shown above will log JSON for each document like the following example (in case of Hippo Resource Bundle document):
        </p>

        <div class="brush: javascript">
        <source><![CDATA[
{
  "name" : "examplemessages",
  "primaryType" : "resourcebundle:resourcebundle",
  "mixinTypes" : [ "mix:referenceable" ],
  "properties" : [ {
    "name" : "resourcebundle:descriptions",
    "type" : "STRING",
    "multiple" : true,
    "values" : [ "Example resource bundle document" ]
  }, {
    "name" : "resourcebundle:id",
    "type" : "STRING",
    "multiple" : false,
    "values" : [ "org.example.messages" ]
  }, {
    "name" : "hippostdpubwf:lastModifiedBy",
    "type" : "STRING",
    "multiple" : false,
    "values" : [ "admin" ]
  }, {
    "name" : "hippotranslation:locale",
    "type" : "STRING",
    "multiple" : false,
    "values" : [ "document-type-locale" ]
  }, {
    "name" : "resourcebundle:messages",
    "type" : "STRING",
    "multiple" : true,
    "values" : [ "Example Header Message", "Example Footer Message" ]
  }, {
    "name" : "hippostd:stateSummary",
    "type" : "STRING",
    "multiple" : false,
    "values" : [ "live" ]
  }, {
    "name" : "resourcebundle:keys",
    "type" : "STRING",
    "multiple" : true,
    "values" : [ "header.text", "footer.text" ]
  }, {
    "name" : "hippostd:state",
    "type" : "STRING",
    "multiple" : false,
    "values" : [ "published" ]
  }, {
    "name" : "hippo:availability",
    "type" : "STRING",
    "multiple" : true,
    "values" : [ "live", "preview" ]
  }, {
    "name" : "hippostdpubwf:publicationDate",
    "type" : "DATE",
    "multiple" : false,
    "values" : [ "2014-08-21T22:10:54.657+02:00" ]
  }, {
    "name" : "hippotranslation:id",
    "type" : "STRING",
    "multiple" : false,
    "values" : [ "e9703ff4-d522-4238-bf3b-6016f959e88c" ]
  }, {
    "name" : "hippostdpubwf:lastModificationDate",
    "type" : "DATE",
    "multiple" : false,
    "values" : [ "2014-08-21T22:10:52.812+02:00" ]
  }, {
    "name" : "hippostdpubwf:createdBy",
    "type" : "STRING",
    "multiple" : false,
    "values" : [ "admin" ]
  }, {
    "name" : "hippostdpubwf:creationDate",
    "type" : "DATE",
    "multiple" : false,
    "values" : [ "2014-08-21T22:10:13.443+02:00" ]
  } ],
  "nodes" : [ ]
}
        ]]></source>
        </div>
      </subsection>

      <subsection name="Mapping Binary Content">

        <table border="1">
          <tr>
            <th>Name:</th>
            <td>
              Export All Live Images to JSON
            </td>
          </tr>
          <tr>
            <th>Description:</th>
            <td>
              For demonstration purpose, this example groovy script (a) maps each live gallery imageset node
              to <code>ContentNode</code>, and (b) logs a serialized string from the <code>ContentNode</code>.
            </td>
          </tr>
          <tr>
            <th>XPath query:</th>
            <td>
              <code>/jcr:root/content/gallery//element(*,hippogallery:imageset)[@hippo:availability='live']</code>
            </td>
          </tr>
          <tr>
            <th>Parameters:</th>
            <td></td>
          </tr>
          <tr>
            <td colspan="2">
              <div class="brush: java">
              <source><![CDATA[
package org.hippoecm.frontend.plugins.cms.admin.updater

import org.onehippo.repository.update.BaseNodeUpdateVisitor
import java.util.*
import javax.jcr.query.*
import org.apache.commons.lang.*
import org.onehippo.forge.content.pojo.common.jcr.*
import org.onehippo.forge.content.pojo.common.util.*
import org.onehippo.forge.content.pojo.mapper.*
import org.onehippo.forge.content.pojo.mapper.jcr.*
import org.onehippo.forge.content.pojo.mapper.jcr.hippo.*
import org.onehippo.forge.content.pojo.model.*
import com.fasterxml.jackson.databind.*

class UpdaterTemplate extends BaseNodeUpdateVisitor {

    Session jcrSession
    ContentNodeMapper contentNodeMapper
    ObjectMapper objectMapper

    void initialize(Session jcrSession) {
        this.jcrSession = jcrSession

        contentNodeMapper = new DefaultJcrContentNodeMapper();
        objectMapper = new ObjectMapper();
    }

    boolean doUpdate(Node node) {
        log.debug "Visiting node ${node.path}"
        def handleNode = node.getParent()

        // Mapping the gallery imageset node to ContentNode
        ContentNode contentNode = contentNodeMapper.map(node)

        // Let's print out (serialize) the content node by simply using Jackson ObjectMapper for debugging purpose.
        StringWriter writer = new StringWriter(2048)
        objectMapper.writerWithDefaultPrettyPrinter().writeValue(writer, contentNode)
        log.debug "\n" + writer.toString() + "\n"

        return false
    }

    boolean undoUpdate(Node node) {
        throw new UnsupportedOperationException('Updater does not implement undoUpdate method')
    }

}
              ]]></source>
              </div>
            </td>
          </tr>
        </table>

        <p>
          The script shown above will log JSON for each Image Set node like the following example:
        </p>

        <div class="brush: javascript">
        <source><![CDATA[
{
  "name" : "viognier-grapes-188185_640.jpg",
  "primaryType" : "hippogallery:imageset",
  "mixinTypes" : [ "mix:referenceable" ],
  "properties" : [ {
    "name" : "hippogallery:description",
    "type" : "STRING",
    "multiple" : false,
    "values" : [ "Description for viognier-grapes-188185_640.jpg" ]
  }, {
    "name" : "hippo:availability",
    "type" : "STRING",
    "multiple" : true,
    "values" : [ "live", "preview" ]
  }, {
    "name" : "hippogallery:filename",
    "type" : "STRING",
    "multiple" : false,
    "values" : [ "viognier-grapes-188185_640.jpg" ]
  } ],
  "nodes" : [ {
    "name" : "hippogallery:thumbnail",
    "primaryType" : "hippogallery:image",
    "mixinTypes" : [ ],
    "properties" : [ {
      "name" : "jcr:data",
      "type" : "BINARY",
      "multiple" : false,
      "values" : [ "data:;base64," ]
    }, {
      "name" : "jcr:lastModified",
      "type" : "DATE",
      "multiple" : false,
      "values" : [ "2013-11-12T12:15:00.000+01:00" ]
    }, {
      "name" : "hippogallery:height",
      "type" : "LONG",
      "multiple" : false,
      "values" : [ "60" ]
    }, {
      "name" : "jcr:mimeType",
      "type" : "STRING",
      "multiple" : false,
      "values" : [ "image/jpeg" ]
    }, {
      "name" : "hippogallery:width",
      "type" : "LONG",
      "multiple" : false,
      "values" : [ "58" ]
    } ],
    "nodes" : [ ]
  }, {
    "name" : "hippogallery:original",
    "primaryType" : "hippogallery:image",
    "mixinTypes" : [ ],
    "properties" : [ {
      "name" : "jcr:data",
      "type" : "BINARY",
      "multiple" : false,
      "values" : [ "file:///Users/john.doe/myhippoproject/target/tomcat8x/temp/DefaultJcrContentValueConverter_4982037632181885063" ]
    }, {
      "name" : "jcr:lastModified",
      "type" : "DATE",
      "multiple" : false,
      "values" : [ "2013-11-12T12:15:00.000+01:00" ]
    }, {
      "name" : "hippogallery:height",
      "type" : "LONG",
      "multiple" : false,
      "values" : [ "640" ]
    }, {
      "name" : "jcr:mimeType",
      "type" : "STRING",
      "multiple" : false,
      "values" : [ "image/jpeg" ]
    }, {
      "name" : "hippogallery:width",
      "type" : "LONG",
      "multiple" : false,
      "values" : [ "625" ]
    } ],
    "nodes" : [ ]
  } ]
}
        ]]></source>
        </div>

      </subsection>

    </section>

  </body>
</document>
