<?xml version="1.0" encoding="UTF-8"?><!--
    Copyright 2015 Hippo Licensed under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
    OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and
    limitations under the License.
  --><!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties>
    <title>Introduction</title>
  </properties>
  <body>
    <section name="Introduction">
      <subsection name="What is Hippo JCR POJO Binding?">
        <p>
          This project aims to provide a simple set of POJO beans
          with which you can <strong><i>map</i></strong> JCR (document, binary, etc) nodes to POJO (<code>ContentNode</code>) beans,
          and also <strong><i>bind</i></strong> the POJO beans back to JCR (document, binary, etc) nodes.
          The POJO beans provided by this project are very friendly to most marshalling/unmarshalling frameworks
          such as Jackson (for JSON), JAXB (for XML) or any others (for YAML as an example).
          Therefore, you can easily export JCR content through the POJO (<code>ContentNode</code>) beans after <strong><i>mapping</i></strong>,
          and import data through the (unmarshalled) POJO (<code>ContentNode</code>) beans to JCR content by <strong><i>binding</i></strong>.
        </p>
        <img src="images/hippo-jcr-pojo-bind.png" alt="Hippo JCR POJO Binding" />
        <p>
          As depicted in the diagram above, what this project provides is in the light yellow area in the center.
          The left and right area are out of scope in this project.
        </p>
        <p>Some pointers are:</p>
        <ul>
          <li>JCR nodes can be easily <strong><i>mapped</i></strong> to <strong><code>ContentNode</code></strong> POJO beans provided by this project.</li>
          <li><strong><code>ContentNode</code></strong> POJO beans can be used to update JCR nodes back in <strong><i>binding</i></strong> process.</li>
          <li>
            Because <strong><code>ContentNode</code></strong> is purely lightweight POJO bean without any stateful members
            such as <code>javax.jcr.Node</code> or <code>javax.jcr.Property</code>,
            you can easily marshal the <strong><code>ContentNode</code></strong> POJO beans to JSON or XML files,
            and unmarshal the <strong><code>ContentNode</code></strong> POJO beans back from the JSON or XML files.
          </li>
          <li>
            Nowadays, it is very easy to (un)marshal from/to JSON using libraries such as Jackson,
            and it is also easy to (un)marshal from/to XML using libraries such as JAXB API.
          </li>
          <li>
            Therefore, this project can be valuable especially in case that JCR content should be serialized to files and/or
            reconstructed or updated JCR content back from the files.
          </li>
        </ul>
      </subsection>
    </section>
    <section name="ContentNode and ContentProperty">
      <p>
        Basically two main POJO beans are provided by this project: <code>ContentNode</code> and <code>ContentProperty</code>.
      </p>
      <p>
        <code>ContentNode</code> is analogous to <code>javax.jcr.Node</code> and
        <code>ContentProperty</code> is analogous to <code>javax.jcr.Property</code>.
        <code>ContentNode</code> may have multiple <code>ContentProperty</code> items
        and multiple child <code>ContentNode</code> items like JCR.
        But they are purely serializable as POJOs.
        Also, for simplicity, <code>ContentProperty</code> stores all the values in string.
        It provides type transforming getter methods for convenience though.
        For example, <code>ContentProperty#getValue(String name)</code> returns a string value,
        and <code>ContentProperty#getValues(String name)</code> returns a list of string values.
        However, <code>CotnentProperty#getValueAsObject(String name)</code> returns a transformed object value
        (e.g, Long, Double, BigDecimal, Calendar, BinaryValue, etc) from the internal string value,
        and <code>CotnentProperty#getValuesAsObject(String name)</code> returns a list of transformed object values
        for convenience.
      </p>
      <p>
        Please see more detail in <a href="apidocs/index.html">JavaDocs</a>.
      </p>
    </section>
    <section name="Binary Data Value Handling">
      <p>
        It is very crucial to handle binary data properly even in a simple mapping/binding library
        because the data size of a binary value can be big which may make a bad impact on system availability (e.g, OutOfMemoryError).
      </p>
      <p>
        So, this library handles binary data values carefully with using <code>BinaryValue</code> unlike other values
        (other values are always stringified internally for simplicity).
      </p>
      <p>
        For example, <code>DefaultJcrContentValueConverter</code> (the default <code>ContentValueConverter</code> implementation)
        is able to automatically serialize a binary data into an external <a href="https://commons.apache.org/proper/commons-vfs/">VFS</a> file
        and keep the URL string only in the <code>ContentProperty</code> instance
        if the data size exceeds the configured threshold size.
        If the data size is less than the configured threshold size, it simply converts the binary data
        into a <code>data:</code> URL (containing a mimeType optionally as well as BASE64 encoded string).
      </p>
    </section>
    <section name="Project status">
      <p>
        Please see <a href="release-notes.html">Release Notes</a>.
      </p>
      <p>
        See the
        <a href="http://forge.onehippo.org/gf/project/hippo-pojo-bind">forge project page</a>
        for more info about the project itself.
      </p>
    </section>
  </body>
</document>
